module Euler8 where

input :: [Integer]
input = [7, 3, 1, 6, 7, 1, 7, 6, 5, 3, 1, 3, 3, 0, 6, 2, 4, 9, 1, 9, 2, 2, 5, 1, 1, 9, 6, 7, 4, 4, 2, 6, 5, 7, 4, 7, 4, 2, 3, 5,
         5, 3, 4, 9, 1, 9, 4, 9, 3, 4, 9, 6, 9, 8, 3, 5, 2, 0, 3, 1, 2, 7, 7, 4, 5, 0, 6, 3, 2, 6, 2, 3, 9, 5, 7, 8, 3, 1, 8, 0,
         1, 6, 9, 8, 4, 8, 0, 1, 8, 6, 9, 4, 7, 8, 8, 5, 1, 8, 4, 3, 8, 5, 8, 6, 1, 5, 6, 0, 7, 8, 9, 1, 1, 2, 9, 4, 9, 4, 9, 5,
         4, 5, 9, 5, 0, 1, 7, 3, 7, 9, 5, 8, 3, 3, 1, 9, 5, 2, 8, 5, 3, 2, 0, 8, 8, 0, 5, 5, 1, 1, 1, 2, 5, 4, 0, 6, 9, 8, 7, 4,
         7, 1, 5, 8, 5, 2, 3, 8, 6, 3, 0, 5, 0, 7, 1, 5, 6, 9, 3, 2, 9, 0, 9, 6, 3, 2, 9, 5, 2, 2, 7, 4, 4, 3, 0, 4, 3, 5, 5, 7,
         6, 6, 8, 9, 6, 6, 4, 8, 9, 5, 0, 4, 4, 5, 2, 4, 4, 5, 2, 3, 1, 6, 1, 7, 3, 1, 8, 5, 6, 4, 0, 3, 0, 9, 8, 7, 1, 1, 1, 2,
         1, 7, 2, 2, 3, 8, 3, 1, 1, 3, 6, 2, 2, 2, 9, 8, 9, 3, 4, 2, 3, 3, 8, 0, 3, 0, 8, 1, 3, 5, 3, 3, 6, 2, 7, 6, 6, 1, 4, 2,
         8, 2, 8, 0, 6, 4, 4, 4, 4, 8, 6, 6, 4, 5, 2, 3, 8, 7, 4, 9, 3, 0, 3, 5, 8, 9, 0, 7, 2, 9, 6, 2, 9, 0, 4, 9, 1, 5, 6, 0,
         4, 4, 0, 7, 7, 2, 3, 9, 0, 7, 1, 3, 8, 1, 0, 5, 1, 5, 8, 5, 9, 3, 0, 7, 9, 6, 0, 8, 6, 6, 7, 0, 1, 7, 2, 4, 2, 7, 1, 2,
         1, 8, 8, 3, 9, 9, 8, 7, 9, 7, 9, 0, 8, 7, 9, 2, 2, 7, 4, 9, 2, 1, 9, 0, 1, 6, 9, 9, 7, 2, 0, 8, 8, 8, 0, 9, 3, 7, 7, 6,
         6, 5, 7, 2, 7, 3, 3, 3, 0, 0, 1, 0, 5, 3, 3, 6, 7, 8, 8, 1, 2, 2, 0, 2, 3, 5, 4, 2, 1, 8, 0, 9, 7, 5, 1, 2, 5, 4, 5, 4,
         0, 5, 9, 4, 7, 5, 2, 2, 4, 3, 5, 2, 5, 8, 4, 9, 0, 7, 7, 1, 1, 6, 7, 0, 5, 5, 6, 0, 1, 3, 6, 0, 4, 8, 3, 9, 5, 8, 6, 4,
         4, 6, 7, 0, 6, 3, 2, 4, 4, 1, 5, 7, 2, 2, 1, 5, 5, 3, 9, 7, 5, 3, 6, 9, 7, 8, 1, 7, 9, 7, 7, 8, 4, 6, 1, 7, 4, 0, 6, 4,
         9, 5, 5, 1, 4, 9, 2, 9, 0, 8, 6, 2, 5, 6, 9, 3, 2, 1, 9, 7, 8, 4, 6, 8, 6, 2, 2, 4, 8, 2, 8, 3, 9, 7, 2, 2, 4, 1, 3, 7,
         5, 6, 5, 7, 0, 5, 6, 0, 5, 7, 4, 9, 0, 2, 6, 1, 4, 0, 7, 9, 7, 2, 9, 6, 8, 6, 5, 2, 4, 1, 4, 5, 3, 5, 1, 0, 0, 4, 7, 4,
         8, 2, 1, 6, 6, 3, 7, 0, 4, 8, 4, 4, 0, 3, 1, 9, 9, 8, 9, 0, 0, 0, 8, 8, 9, 5, 2, 4, 3, 4, 5, 0, 6, 5, 8, 5, 4, 1, 2, 2,
         7, 5, 8, 8, 6, 6, 6, 8, 8, 1, 1, 6, 4, 2, 7, 1, 7, 1, 4, 7, 9, 9, 2, 4, 4, 4, 2, 9, 2, 8, 2, 3, 0, 8, 6, 3, 4, 6, 5, 6,
         7, 4, 8, 1, 3, 9, 1, 9, 1, 2, 3, 1, 6, 2, 8, 2, 4, 5, 8, 6, 1, 7, 8, 6, 6, 4, 5, 8, 3, 5, 9, 1, 2, 4, 5, 6, 6, 5, 2, 9,
         4, 7, 6, 5, 4, 5, 6, 8, 2, 8, 4, 8, 9, 1, 2, 8, 8, 3, 1, 4, 2, 6, 0, 7, 6, 9, 0, 0, 4, 2, 2, 4, 2, 1, 9, 0, 2, 2, 6, 7,
         1, 0, 5, 5, 6, 2, 6, 3, 2, 1, 1, 1, 1, 1, 0, 9, 3, 7, 0, 5, 4, 4, 2, 1, 7, 5, 0, 6, 9, 4, 1, 6, 5, 8, 9, 6, 0, 4, 0, 8,
         0, 7, 1, 9, 8, 4, 0, 3, 8, 5, 0, 9, 6, 2, 4, 5, 5, 4, 4, 4, 3, 6, 2, 9, 8, 1, 2, 3, 0, 9, 8, 7, 8, 7, 9, 9, 2, 7, 2, 4,
         4, 2, 8, 4, 9, 0, 9, 1, 8, 8, 8, 4, 5, 8, 0, 1, 5, 6, 1, 6, 6, 0, 9, 7, 9, 1, 9, 1, 3, 3, 8, 7, 5, 4, 9, 9, 2, 0, 0, 5,
         2, 4, 0, 6, 3, 6, 8, 9, 9, 1, 2, 5, 6, 0, 7, 1, 7, 6, 0, 6, 0, 5, 8, 8, 6, 1, 1, 6, 4, 6, 7, 1, 0, 9, 4, 0, 5, 0, 7, 7,
         5, 4, 1, 0, 0, 2, 2, 5, 6, 9, 8, 3, 1, 5, 5, 2, 0, 0, 0, 5, 5, 9, 3, 5, 7, 2, 9, 7, 2, 5, 7, 1, 6, 3, 6, 2, 6, 9, 5, 6,
         1, 8, 8, 2, 6, 7, 0, 4, 2, 8, 2, 5, 2, 4, 8, 3, 6, 0, 0, 8, 2, 3, 2, 5, 7, 5, 3, 0, 4, 2, 0, 7, 5, 2, 9, 6, 3, 4, 5, 0]

{-
>>> fmap (\(x y z) -> x) (buildProduct 13 input)
Parse error in pattern: x
-}
buildProduct :: Int -> [Integer] -> Maybe (Integer, [(Integer, Integer)])
buildProduct length values = build length 1 values []
    where
        build 0 prod vs os     = Just (prod, zip (reverse os ++ vs) vs)
        build n prod (0:vs) os = build length 1 vs []
        build n prod (v:vs) os = build (n-1) (prod * v) vs (v:os)
        build _ _ [] _         = Nothing

{-
>>> slidingProduct 13 input
[5000940,4199040,4898880,9797760,9797760,2177280,13063680,7257600,25401600,50803200,71124480,284497920,568995840,189665280,158054400,112896000,84672000,84672000,381024000,63504000,114307200,65318400,146966400,62985600,62985600,283435200,566870400,1020366720,1632586752,1632586752,2040733440,453496320,78382080,371589120,2972712960,1857945600,2477260800,1651507200,412876800,294912000,221184000,235146240,167961600,188956800,104976000,42865200,342921600,244944000,244944000,69984000,812851200,812851200,270950400,6270566400,14108774400,23514624000,3225600,2419200,604800,967680,2419200,3628800,3628800,677376,225792,28224,4032,12096,72576,145152,145152,290304,373248,1492992,6718464,6718464,3359232,2239488,6718464,20155392,53747712,13063680,3265920,26127360,17418240,27869184,424673280,495452160,495452160,1114767360,836075520,2709504,24385536,27869184,97542144,219469824,768144384,987614208,630118440,120960000,96768000,96768000,2016000,1008000,3024000,10584000,13230000,9922500,59535000,107163000,107163000,428652000,214326000,1500282000,2700507600,3780710640,8821658160,7841473920,4480842240,5377010688,1792336896,2091059712,929359872,313528320,235146240,313528320,940584960,376233984,125411328,55738368,148635648,148635648,1189085184,396361728,509607936,445906944,222953472,74317824,37158912,6193152,9289728,32514048,40642560,30481920,76204800,66679200,365783040,261273600,87091200,62208000,31104000,258048000,258048000,309657600,309657600,495452160,123863040,123863040,371589120,743178240,212336640,297271296,37158912,32514048,5419008,3612672,4214784,4741632,5334336,10668672,42674688,28449792,28449792,28449792,36578304,73156608,83607552,167215104,125411328,627056640,78382080,117573120,39191040,19595520,9797760,1959552,1959552,559872,1119744,279936,1119744,1866240,1658880,9953280,1105920,7741440,30965760,61931520,371589120,247726080,619315200,619315200,928972800,1161216000,2090188800,261273600,87091200,348364800,248832000,186624000,186624000,155520000,77760000,139968000,69984000,163296000,195955200,108864000,435456000,1088640000,1632960000,2612736000,870912000,1161216000,928972800,3715891200,3715891200,928972800,265420800,353894400,566231040,424673280,84934656,56623104,14155776,42467328,223948800,199065600,33177600,33177600,24883200,2048385024,1820786688,910393344,1170505728,462944160,462944160,132269760,208372500,250047000,150028200,100018800,66679200,80015040,102876480,257191200,171460800,24494400,97977600,156764160,44789760,268738560,313528320]
-}
slidingProduct :: Int -> [Integer] -> [Integer]
slidingProduct length = restart
    where
        slide _ ((_, 0):slices) = restart (map snd slices)
        slide prod ((a, b):slices) = b':slide b' slices
            where b' = b * div prod a
        slide _ [] = []
        restart ls = case buildProduct length ls of
            Just (newProd, slices) -> newProd:slide newProd slices
            Nothing                -> []
{-
>>> euler8
23514624000
-}
euler8 :: Integer
euler8 = maximum $ slidingProduct 13 input
